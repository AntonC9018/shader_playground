/*
Copyright (c) 2015-2021 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Trie-based dictionary (associative array) that can use any type as a key
 *
 * Copyright: Timur Gafarov 2015-2021.
 * License: $(LINK2 boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov, Andrey Penechko, Roman Chistokhodov, ijet
 */
module dlib.container.dict;

import std.stdio;
import std.traits;
import std.format;
import std.string;
import dlib.core.memory;
import dlib.container.array;

size_t dataSize(T)(T v)
{
    static if (is(T == class) || is(T == interface))
        return (void*).sizeof;
    else
    static if (isArray!T)
        return v.length * (ForeachType!T).sizeof;
    else
        return T.sizeof;
}

auto byteRange(T)(T v)
{
    struct R
    {
        T value;
        size_t size;
        size_t offset;

        this(T v)
        {
            value = v;
            size = dataSize(v);
            offset = 0;
        }

        @property bool empty()
        {
            return (offset >= size);
        }

        @property ubyte front()
        {
            ubyte* ptr;
            static if (isArray!T) { ptr = (cast(ubyte[])value).ptr;}
            else { ptr = cast(ubyte*)&value; }
            return ptr[offset];
        }

        void popFront()
        {
            offset++;
        }
    }

    return R(v);
}

/**
 * Trie-based dictionary (associative array) that can use any type as a key. No hash functions are required.
 */
class Trie(T, K)
{
    T value;
    K key;
    ubyte symbol;
    Array!(Trie!(T, K)) children;
    bool active = false;
    size_t length = 0;

    this()
    {
    }

    this(ubyte s)
    {
        symbol = s;
    }

    /// Set value by key.
    void set(K k, T v)
    {
        Trie!(T, K) current = this;
        foreach(s; byteRange(k))
        {
            bool found = false;
            foreach(c; current.children)
            {
                if (c.symbol == s)
                {
                    current = c;
                    found = true;
                    break;
                }
            }

            if (!found)
            {
                auto n = New!(Trie!(T, K))(s);
                current.children.append(n);
                current = n;

                //current.children.append(n);
                //current = n;
            }
        }

        if (current !is this)
        {
            current.value = v;
            current.key = k;

            if (!current.active)
            {
                current.active = true;
                length++;
            }
        }
    }

    /// Get value by key. Returns null if the element does not exist in trie.
    T* get(K k)
    {
        Trie!(T, K) current = this;
        foreach(ubyte s; byteRange(k))
        {
            bool found = false;
            foreach(c; current.children)
            {
                if (c.symbol == s)
                {
                    found = true;
                    current = c;
                    break;
                }
            }

            if (!found)
                return null;
        }

        if (current !is this)
        {
            if (current.active &&
                current.key == k)
            {
                return &current.value;
            }
        }

        return null;
    }

    /// Remove element by key.
    void remove(K k)
    {
        Trie!(T, K) current = this;
        foreach(ubyte s; byteRange(k))
        {
            bool found = false;
            foreach(c; current.children)
            {
                if (c.symbol == s)
                {
                    found = true;
                    current = c;
                    break;
                }
            }

            if (!found)
                return;
        }

        if (current !is this)
        {
            if (current.active &&
                current.key == k)
            {
                current.active = false;
                length--;
            }
        }
    }

    /// Get value by key. It's an error to access non-existing key.
    T opIndex(K k)
    {
        T* v = get(k);
        if (v !is null)
            return *v;
        else
            assert(0, format("Non-existing key in Trie.opIndex: %s", k));
    }

    /// Set value by key
    T opIndexAssign(T v, K k)
    {
        set(k, v);
        return v;
    }

    ///
    T* opBinaryRight(string op)(K k) if (op == "in")
    {
        return get(k);
    }

    int opApply(scope int delegate(K, ref T) dg)
    {
        int result = 0;

        foreach(c; children)
        {
            if (c.active)
                result = dg(c.key, c.value);

            if (result)
                break;

            result = c.opApply(dg);

            if (result)
                break;
        }

        return result;
    }

    /// Remove all elements.
    void clear()
    {
        foreach(c; children)
        {
            Delete(c);
        }

        children.free();
        length = 0;
    }

    ~this()
    {
        clear();
    }

    /// Trie must be manually freed when it's no longer needed.
    void free()
    {
        Delete(this);
    }
}

/// Convenient alias
alias Dict = Trie;

/// Convenient function for dict creation.
Dict!(T, K) dict(T, K)()
{
    return New!(Dict!(T, K))();
}

///
unittest
{
    auto d = dict!(string, string)();
    scope(exit) d.free();
    d["Hell"] = "No";
    d["Hello"] = "World";
    d["Help"] = "Me";
    d["Something"] = "Else";
    assert(d["Hell"] == "No");
    assert(d["Hello"] == "World");
    assert(d["Help"] == "Me");
    assert(d["Something"] == "Else");
    assert("Held" !in d);
    assert(d.length == 4);

    string[string] elements;
    foreach(key, value; d)
    {
        elements[key] = value;
    }
    assert(elements["Hell"] == "No");
    assert(elements["Hello"] == "World");
    assert(elements["Help"] == "Me");
    assert(elements["Something"] == "Else");
    assert(elements.length == d.length);

    d["Something"] = "New";
    assert(d["Something"] == "New");

    d.remove("Hell");
    assert(d.length == 3);
    assert(d.get("Hell") is null);

    d.clear();
    assert(d.length == 0);
    assert("Hello" !in d);
    assert("Help" !in d);
    assert("Something" !in d);

    d["Held"] = "Fire";
    assert(d["Held"] == "Fire");

    auto di = dict!(string, int);
    scope(exit) di.free();
    di[0xBEAF] = "BEAF";
    di[0xDEADBEAF] = "DEADBEAF";
    di[0xDEAD] = "DEAD";
    assert(di[0xBEAF] == "BEAF");
    assert(di[0xDEADBEAF] == "DEADBEAF");
    assert(di[0xDEAD] == "DEAD");
}
